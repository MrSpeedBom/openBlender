
#define mat4x4 array<array<float,4>4>
unsigned int stb_maketex(string file){
int width, height, nrChannels;
glGenTextures(1, &texlen);
glBindTexture(GL_TEXTURE_2D, texlen);
// set the texture wrapping/filtering options (on currently bound texture)
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
// load and generate the texture
unsigned char *data = stbi_load(file.data(), &width, &height,&nrChannels, 0);
if (data)
{
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB,GL_UNSIGNED_BYTE, data);
}
else
{
std::cout << "Failed to load texture" << std::endl;
}
stbi_image_free(data);
return texlen++;
}
mat4x4 getrotation(float x,point vec)
{
    float g=vec.norm();
    vec={vec.x/g,vec.y/g,vec.z/g};
    return {
        cos(x)+vec.x*vec.x*(1-cos(x)),vec.x*vec.y*(1-cos(x))-vec.z*sin(x),vec.x*vec.z*(1-cos(x))+vec.y*sin(x),0,
        vec.y*vec.x*(1-cos(x))+vec.z*sin(x),cos(x)+vec.y*vec.y*(1-cos(x)),vec.y*vec.z*(1-cos(x))-vec.x*sin(x),0,
        vec.z*vec.x*(1-cos(x))-vec.y*sin(x),vec.z*vec.y*(1-cos(x))+vec.x*sin(x),cos(x)+vec.z*vec.z*(1-cos(x)),0,
        0,0,0,1
    };
}
mat4x4 getshift(point sh) {
    return {
        1,0,0,sh.x,
        0,1,0,sh.y,
        0,0,1,sh.z,
        0,0,0,1
    };
}
point mul(mat4x4 m,point p)
{
    point res;
    res.x=m[0][0]*p.x+m[0][1]*p.y+m[0][2]*p.z+m[0][3];
    res.y=m[1][0]*p.x+m[1][1]*p.y+m[1][2]*p.z+m[1][3];
    res.z=m[2][0]*p.x+m[2][1]*p.y+m[2][2]*p.z+m[2][3];
    float w=m[3][0]*p.x+m[3][1]*p.y+m[3][2]*p.z+m[3][3];
    res={res.x/w,res.y/w,res.z/w};
    p=res;
    return res;
}